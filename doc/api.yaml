openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
info:
  title: WASA-text
  description: |
    Connect with your friends effortlessly using WASAText! Send and receive messages, whether one-on-one
    or in groups, all from the convenience of your PC. Enjoy seamless conversations with text or GIFs and
    easily stay in touch through your private chats or group discussions.
  version: 0.0.1

tags:
  - name: "Login"
    description: |
      Session of a user who logged in
  - name: "User"
    description: |
      Operations that access to user information (like username and photo picture)
  - name: "Conversation"
    description: |
      Operations acting on conversations
  - name: "Group"
    description: |
      Operations acting on groups
  - name: "Message"
    description: |
      Operations acting on messages
  - name: "Comment"
    description: |
      Operations acting on comment of messages



components:
  schemas:
    conversation:
      title: Conversation
      description: "This object represent a 1-1 or group conversation"
      type: object
      properties:
        id:
          description: Unique conversation identifier
          type: integer
          example: 85723
          readOnly: true
        members:
          description: List od user IDs in the conversation
          type: array
          items:
            type: string
            example: ["abcdef012345","gfkjskj20392"]
        createdAt:
          description: Timestamp when the conversation was created
          type: string
          format: date-time
          example: "2024-10-15T10:00:00Z"
        timeStamp:
          description: Timestamp when the conversation was last updated with a new message
          type: string
          format: date-time
          example: "2024-11-15T11:00:00Z"
        lastMessage:
          description: Last message sent in the conversation, can be used as conv. preview
          type: string
          example: "Hello everyone!"
        photo:
          type: string
          description: URL to the coversation's photo
          example: "https://example.com/photos/user123.jpg"
      required:
        - id
        - members
        - createdAt
    user:
      title: User
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user.
          example: "user123"
        name:
          type: string
          description: Name of the user.
          example: "Maria"
        photo:
          type: string
          description: URL to the user's profile photo.
          example: "https://example.com/photos/user123.jpg"
      required:
        - id
        - name
    message:
      title: Message
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message.
          example: "msg123"
        conversationId:
          type: integer
          description: The ID of the conversation this message belongs to.
          example: "12345"
        senderId:
          type: string
          description: The ID of the user who sent the message.
          example: "abcdef12345"
        type:
          type: string
          description: The type of message content.
          enum: [text, image, gif]
          example: "image"
        content:
          type: string
          description: The text content of the message (for `text` type).
          example: "Hello, how are you?"
        mediaUrl:
          type: string
          description: URL to the media file (for `image` or `gif` type).
          example: "https://example.com/media/image123.jpg"
        timestamp:
          type: string
          format: date-time
          description: The time the message was sent.
          example: "2024-11-15T10:00:00Z"
        isReceived:
          type: boolean
          description: Indicates if the message has been received (by all users in the conversation).
          example: true
        isRead:
          type: boolean
          description: Indicates if the message has been read (by all users in the conversation).
          example: true
      required:
        - id
        - conversationId
        - senderId
        - type
        - timestamp
        # If 'type' is 'text', ensure 'content' is provided and 'mediaUrl' is null or ignored.
        # If 'type' is 'image' or 'gif', ensure 'mediaUrl' is provided and valid.
    
     # Used for the Error responses (40x and 50x)
    Error:
      description: Object describe an error with the code and the message
      type: object
      properties:
        errors:
          description: Array of error codes generated by the operation
          type: array
          items:
            type: object
            description: Description of the error
            properties:
              code:
                description: Code error
                type: integer
                enum: [400, 401, 403, 404, 500]
                example: 404
              reason:
                type: string
                description: Explanation of the reason for the error which can be shown to a client user
                pattern: "^.*?$"
                example: Page not found
                minLength: 1
                maxLength: 100
              message:
                type: string
                description: More details of the error
                pattern: "^.*?$"
                example: "The requested URL was not found"
                minLength: 1
                maxLength: 100
            required:
              - code
              - reason
          minItems: 1
          maxItems: 100
      required:
        - errors

  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Unauthorized:
      description: The access token is missing or it's expired
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Forbidden:
      description: The user is not allowed to perform the action
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    NotFound:
      description: Element not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }



          
paths:
  /session:
    post:
      tags: [Login]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
              required:
                - name
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string # Change this to "integer" if you use integer identifiers
                    example: "abcdef012345"
  /users:
  /users/{user}:
  /users/{user}/username:
  /users/{user}/userPicture:
  /users/{user}/conversations:
  /users/{user}/conversations/{conversation}:
  /users/{user}/conversations/{conversation}/messages:
  /users/{user}/conversations/{conversation}/messages/{lastMessage}:
  /users/{user}/conversations/{conversation}/messages/{message}:
  /users/{user}/conversations/{conversation}/messages/{message}/reactions:
  /users/{user}/conversations/{conversation}/messages/{message}/reactions/{reaction}:

  /users/{user}/groups:
  /users/{user}/groups/{group}:
  /users/{user}/groups/{group}/groupPicture:

