openapi: 3.0.3
info:
  title: WASAText API
  description: |-
    WASAText messaging application API.
    Connect with your friends effortlessly using WASAText! Send and receive messages, 
    whether one-on-one or in groups, all from the convenience of your PC.
  version: "1.0.0"
  contact:
    name: Emanuele Panizzi, Enrico Bassetti

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: User Management
    description: User profile and search operations
  - name: Conversations
    description: Conversation management endpoints
  - name: Messages
    description: Message operations
  - name: Groups
    description: Group chat management endpoints

security:
  - BearerAuth: []

paths:
  /session:
    post:
      tags: ["Authentication"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      security: []
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Login request details
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 3
                  maxLength: 16
                  description: Username to login with
              required:
                - name
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Login response containing user identifier
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
                    description: User identifier to be used for authentication
                    pattern: '^[a-zA-Z0-9]+$'
                    minLength: 6
                    maxLength: 64
              example:
                identifier: "abcdef012345"
        '400':
          description: Bad request - invalid username format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/username:
    put:
      tags: ["User Management"]
      summary: Update current user's username
      description: Updates the current user's username if the new name is not already taken
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Username update request payload
              properties:
                name:
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 3
                  maxLength: 16
                  example: "NewUsername"
                  description: New username to set
              required:
                - name
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                description: Empty success response
                properties: {}
              example: {}
        '400':
          description: Bad request - invalid username format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/me:
    get:
      tags: ["User Management"]
      summary: Get current user's profile
      description: Retrieve the authenticated user's profile information
      operationId: getMyProfile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userId}:
    get:
      tags: ["User Management"]
      summary: Get user profile by ID
      description: Retrieve a specific user's profile information
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          description: User identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]+$'
            minLength: 6
            maxLength: 64
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/photo:
    put:
      tags: ["User Management"]
      summary: Update current user's profile photo
      description: Upload and set a new profile photo for the authenticated user
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Photo upload form data
              properties:
                photo:
                  type: string
                  format: binary
                  description: Profile photo image file
                  minLength: 1
                  maxLength: 10485760 # 10MB max file size
              required:
                - photo
      responses:
        '200':
          description: Profile photo updated successfully
          content:
            application/json:
              schema:
                type: object
                description: Empty success response
                properties: {}
              example: {}
        '400':
          description: Bad request - invalid image format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users:
    get:
      tags: ["User Management"]
      summary: Search for users by username
      description: Search for other WASAText users by username
      operationId: searchUsers
      parameters:
        - name: q
          in: query
          description: Username search query
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_-]*$'
      responses:
        '200':
          description: List of matching users
          content:
            application/json:
              schema:
                type: object
                description: Search results containing matched users
                properties:
                  users:
                    type: array
                    description: List of users matching the search criteria
                    items:
                      $ref: '#/components/schemas/User'
                    minItems: 0
                    maxItems: 100
              example:
                users:
                  - id: "user123"
                    username: "Maria"
                    photoUrl: "/photos/user123.jpg"
                  - id: "user456"
                    username: "Mario"
                    photoUrl: "/photos/user456.jpg"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /conversations:
    get:
      tags: ["Conversations"]
      summary: Get user's conversations
      description: Get all conversations for the current user, sorted by latest message timestamp
      operationId: getMyConversations
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                description: Object containing user's conversations
                properties:
                  conversations:
                    type: array
                    description: List of user's conversations
                    items:
                      $ref: '#/components/schemas/Conversation'
                    minItems: 0
                    maxItems: 500
              example:
                conversations:
                  - id: "conv123"
                    type: "direct"
                    name: "Maria"
                    photoUrl: "/photos/user123.jpg"
                    lastMessage:
                      id: "msg789"
                      content: "Hello there!"
                      timestamp: "2023-06-15T14:30:00Z"
                      senderUsername: "Maria"
                      hasPhoto: false
                    unreadCount: 2
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /conversations/{conversationId}:
    get:
      tags: ["Conversations"]
      summary: Get conversation messages
      description: Get all messages in a specific conversation
      operationId: getConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Conversation identifier
      responses:
        '200':
          description: Conversation details with messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetail'
              example:
                id: "conv123"
                type: "group"
                name: "Project Team"
                photoUrl: "/photos/group123.jpg"
                members: [
                  {
                    id: "user123",
                    username: "Maria",
                    photoUrl: "/photos/user123.jpg"
                  },
                  {
                    id: "user456",
                    username: "John",
                    photoUrl: "/photos/user456.jpg"
                  }
                ]
                messages: [
                  {
                    id: "msg123",
                    senderId: "user123",
                    senderUsername: "Maria",
                    content: "Hello everyone!",
                    timestamp: "2023-06-15T14:30:00Z",
                    status: "read",
                    comments: []
                  }
                ]
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /conversations/{conversationId}/messages:
    post:
      tags: ["Messages"]
      summary: Send a message
      description: Send a new message to a conversation
      operationId: sendMessage
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Conversation identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Text message content to send
              properties:
                content:
                  type: string
                  description: Message text content
                  maxLength: 1000
                  minLength: 1
                  pattern: '^.+$'
                replyTo:
                  type: string
                  description: ID of message being replied to (optional)
                  minLength: 1
                  maxLength: 36
                  pattern: '^[a-zA-Z0-9_-]+$'
              required:
                - content
          multipart/form-data:
            schema:
              type: object
              description: Photo message content to send
              properties:
                photo:
                  type: string
                  format: binary
                  description: Photo message
                  minLength: 1
                  maxLength: 10485760 # 10MB max
                replyTo:
                  type: string
                  description: ID of message being replied to (optional)
                  minLength: 1
                  maxLength: 36
                  pattern: '^[a-zA-Z0-9_-]+$'
              required:
                - photo
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                id: "msg456"
                senderId: "user123"
                senderUsername: "Maria"
                content: "Hello, how are you?"
                timestamp: "2023-06-15T15:45:00Z"
                status: "sent"
                comments: []
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /messages/{messageId}/forward:
    post:
      tags: ["Messages"]
      summary: Forward a message
      description: Forward an existing message to another conversation
      operationId: forwardMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Message identifier to forward
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Forward message request details
              properties:
                conversationId:
                  type: string
                  description: Target conversation ID
                  minLength: 1
                  maxLength: 36
                  pattern: '^[a-zA-Z0-9_-]+$'
              required:
                - conversationId
      responses:
        '201':
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                id: "msg789"
                senderId: "user123"
                senderUsername: "Maria"
                content: "Hello, how are you?"
                timestamp: "2023-06-15T16:00:00Z"
                status: "sent"
                forwarded: true
                comments: []
        '404':
          description: Message or conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /messages/{messageId}:
    delete:
      tags: ["Messages"]
      summary: Delete a message
      description: Delete a message sent by the current user
      operationId: deleteMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Message identifier
      responses:
        '204':
          description: Message deleted successfully
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - can only delete own messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /messages/{messageId}/comments:
    post:
      tags: ["Messages"]
      summary: Comment on a message
      description: Add a reaction/comment to a message with an emoticon
      operationId: commentMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Message identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Comment details to add to message
              properties:
                emoticon:
                  type: string
                  description: Reaction emoticon
                  example: "👍"
                  maxLength: 10
                  minLength: 1
                  pattern: '^.+$'
              required:
                - emoticon
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example:
                id: "comment123"
                userId: "user456"
                username: "John"
                emoticon: "👍"
                timestamp: "2023-06-15T17:30:00Z"
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /messages/{messageId}/comments/{commentId}:
    delete:
      tags: ["Messages"]
      summary: Remove comment from message
      description: Remove a reaction/comment from a message
      operationId: uncommentMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Message identifier
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Comment identifier
      responses:
        '204':
          description: Comment removed successfully
        '404':
          description: Message or comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - can only delete own comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /groups:
    post:
      tags: ["Groups"]
      summary: Create a new group
      description: Create a new group conversation with specified users
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Group creation request details
              properties:
                name:
                  type: string
                  description: Group name
                  minLength: 1
                  maxLength: 50
                  pattern: '^.+$'
                  example: "My Group Chat"
                members:
                  type: array
                  items:
                    type: string
                    minLength: 1
                    maxLength: 36
                    pattern: '^[a-zA-Z0-9_-]+$'
                  description: Array of user IDs to add to the group
                  minItems: 1
                  maxItems: 100
              required:
                - name
                - members
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              example:
                id: "group123"
                name: "My Group Chat"
                photoUrl: "/photos/default_group.jpg"
                members: [
                  {
                    id: "user123",
                    username: "Maria",
                    photoUrl: "/photos/user123.jpg"
                  },
                  {
                    id: "user456",
                    username: "John",
                    photoUrl: "/photos/user456.jpg"
                  }
                ]
                createdBy: "user123"
                createdAt: "2023-06-15T18:00:00Z"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /groups/{groupId}/members:
    post:
      tags: ["Groups"]
      summary: Add user to group
      description: Add a user to an existing group
      operationId: addToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Group identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: User to add to the group
              properties:
                userId:
                  type: string
                  description: User ID to add to the group
                  minLength: 1
                  maxLength: 36
                  pattern: '^[a-zA-Z0-9_-]+$'
              required:
                - userId
      responses:
        '200':
          description: User added to group successfully
          content:
            application/json:
              schema:
                type: object
                description: Empty success response
                properties: {}
              example: {}
        '404':
          description: Group or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already in group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /groups/{groupId}/members/me:
    delete:
      tags: ["Groups"]
      summary: Leave group
      description: Remove current user from a group
      operationId: leaveGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Group identifier
      responses:
        '204':
          description: Left group successfully
        '404':
          description: Group not found or user not in group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /groups/{groupId}/name:
    put:
      tags: ["Groups"]
      summary: Update group name
      description: Update the name of a group
      operationId: setGroupName
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Group identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Group name update details
              properties:
                name:
                  type: string
                  description: New group name
                  minLength: 1
                  maxLength: 50
                  pattern: '^.+$'
              required:
                - name
      responses:
        '200':
          description: Group name updated successfully
          content:
            application/json:
              schema:
                type: object
                description: Empty success response
                properties: {}
              example: {}
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - not a group member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /groups/{groupId}/photo:
    put:
      tags: ["Groups"]
      summary: Update group photo
      description: Update the photo of a group
      operationId: setGroupPhoto
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            pattern: '^[a-zA-Z0-9_-]+$'
          description: Group identifier
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Group photo upload form data
              properties:
                photo:
                  type: string
                  format: binary
                  description: Group photo image file
                  minLength: 1
                  maxLength: 10485760 # 10MB max
              required:
                - photo
      responses:
        '200':
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                type: object
                description: Empty success response
                properties: {}
              example: {}
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - not a group member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: User identifier obtained from login endpoint

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      description: Error response containing a message explaining what went wrong
      properties:
        message:
          type: string
          description: Error message
          example: "Username already exists"
      required:
        - message

    User:
      type: object
      description: User profile information
      properties:
        id:
          type: string
          description: User identifier
          example: "user123"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        username:
          type: string
          description: Username
          example: "Maria"
          minLength: 3
          maxLength: 16
          pattern: '^[a-zA-Z0-9_-]+$'
        photoUrl:
          type: string
          description: URL to user's profile photo
          example: "/photos/user123.jpg"
          minLength: 1
          maxLength: 255
          pattern: '^/.*$'
      required:
        - id
        - username

    Conversation:
      type: object
      description: A conversation between users, either direct message or group chat
      properties:
        id:
          type: string
          description: Conversation identifier
          example: "conv123"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        type:
          type: string
          enum: ["direct", "group"]
          description: Type of conversation
        name:
          type: string
          description: Conversation name (username for direct, group name for groups)
          example: "Maria"
          minLength: 1
          maxLength: 50
          pattern: '^.+$'
        photoUrl:
          type: string
          description: URL to conversation photo
          example: "/photos/conv123.jpg"
          minLength: 1
          maxLength: 255
          pattern: '^/.*$'
        lastMessage:
          $ref: '#/components/schemas/MessagePreview'
        unreadCount:
          type: integer
          description: Number of unread messages
          example: 3
          minimum: 0
      required:
        - id
        - type
        - name

    ConversationDetail:
      type: object
      description: Detailed view of a conversation including messages
      properties:
        id:
          type: string
          description: Conversation identifier
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        type:
          type: string
          enum: ["direct", "group"]
          description: Type of conversation (direct or group)
        name:
          type: string
          description: Conversation name
          minLength: 1
          maxLength: 50
          pattern: '^.+$'
        photoUrl:
          type: string
          description: URL to conversation photo
          minLength: 1
          maxLength: 255
          pattern: '^/.*$'
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: Conversation members (for groups)
          minItems: 1
          maxItems: 100
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Messages in reverse chronological order
          minItems: 0
          maxItems: 500
      required:
        - id
        - type
        - name
        - messages

    MessagePreview:
      type: object
      description: Preview information about a message, used in conversation listings
      properties:
        id:
          type: string
          description: Message identifier
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        content:
          type: string
          description: Message preview text or indication of photo
          example: "Hello!"
          maxLength: 100
          pattern: '^.*$'
        timestamp:
          type: string
          format: date-time
          description: Message timestamp
        senderUsername:
          type: string
          description: Username of sender
          example: "Maria"
          minLength: 3
          maxLength: 16
          pattern: '^[a-zA-Z0-9_-]+$'
        hasPhoto:
          type: boolean
          description: Whether message contains a photo
      required:
        - id
        - timestamp

    Message:
      type: object
      description: A message sent in a conversation
      properties:
        id:
          type: string
          description: Message identifier
          example: "msg123"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        senderId:
          type: string
          description: ID of message sender
          example: "user123"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        senderUsername:
          type: string
          description: Username of sender
          example: "Maria"
          minLength: 3
          maxLength: 16
          pattern: '^[a-zA-Z0-9_-]+$'
        content:
          type: string
          description: Message text content
          example: "Hello, how are you?"
          minLength: 0
          maxLength: 1000
          pattern: '^.*$'
        photoUrl:
          type: string
          description: URL to photo if message contains image
          example: "/photos/msg123.jpg"
          minLength: 1
          maxLength: 255
          pattern: '^/.*$'
        timestamp:
          type: string
          format: date-time
          description: Message timestamp
        status:
          type: string
          enum: ["sent", "delivered", "read"]
          description: Message delivery status
        replyTo:
          type: string
          description: ID of message this is replying to
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          description: Reactions/comments on this message
          minItems: 0
          maxItems: 50
        forwarded:
          type: boolean
          description: Whether this message was forwarded
          default: false
      required:
        - id
        - senderId
        - senderUsername
        - timestamp
        - status

    Comment:
      type: object
      description: A reaction/comment on a message
      properties:
        id:
          type: string
          description: Comment identifier
          example: "comment123"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        userId:
          type: string
          description: ID of user who made the comment
          example: "user456"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        username:
          type: string
          description: Username of commenter
          example: "John"
          minLength: 3
          maxLength: 16
          pattern: '^[a-zA-Z0-9_-]+$'
        emoticon:
          type: string
          description: Reaction emoticon
          example: "👍"
          minLength: 1
          maxLength: 10
          pattern: '^.+$'
        timestamp:
          type: string
          format: date-time
          description: Comment timestamp
      required:
        - id
        - userId
        - username
        - emoticon
        - timestamp

    Group:
      type: object
      description: A group chat container with multiple participants
      properties:
        id:
          type: string
          description: Group identifier
          example: "group123"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        name:
          type: string
          description: Group name
          example: "My Group Chat"
          minLength: 1
          maxLength: 50
          pattern: '^.+$'
        photoUrl:
          type: string
          description: URL to group photo
          example: "/photos/group123.jpg"
          minLength: 1
          maxLength: 255
          pattern: '^/.*$'
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: Group members
          minItems: 1
          maxItems: 100
        createdBy:
          type: string
          description: ID of user who created the group
          example: "user123"
          minLength: 1
          maxLength: 36
          pattern: '^[a-zA-Z0-9_-]+$'
        createdAt:
          type: string
          format: date-time
          description: Group creation timestamp
      required:
        - id
        - name
        - members
        - createdBy
        - createdAt

